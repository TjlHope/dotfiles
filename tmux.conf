##########################
 ## Tmux Config - TjlH ##
##########################

## External	{{{1

# don't want it to behave as a login shell each time, and mac needs special handling
if-shell '[ "$(uname -o)" = Darwin]' \
	'set-option -qg default-command "exec reattach-to-user-namespace \"$SHELL\""' \
	'set-option -qg default-command "exec \"$SHELL\""'

# Want to keep the COLORTERM env var so colours can be set properly in bash/vim
set-option -qag	update-environment  " TERM"
set-option -qag	update-environment  " COLORTERM"

# Allow use of terminal alternate screen feature (terminfo)
set-window-option -qg	alternate-screen    on	# def: on

## General	{{{1

# Set up an 'r' prefix table
bind-key    r	switch-client -T p--r
bind-key -T p--r    Escape  switch-client -T root

bind-key -T p--r    c	source-file ~/.tmux.conf    # Allow Reload (<prefix>rc)

set-option -qg	history-limit	100000		# Big History
set-option -qs	escape-time	300		# Require faster key repetition

bind-key -r q	display-panes			# Allow repition (hold down)

# Use utf8 (autoset if found from LC_ALL, LC_CTYPE, or LANG)
#set-option -qg	status-utf8	on	# def: off
#set-window-option -qg	utf8	on	# def: off

# TODO: change to tmux instead of screen?
# Ideally we'd test with:
#   if-shell -F '#{||:#{m:*-256color*,#{TERM}},#{m:*-truecolor*,#{TERM} }}'
# but the commas break the command-alias array (extra space so it's not vim a marker)
set-option -sa command-alias set-default-term="\
	if-shell 'case \"$TERM\" in (*-256color*|*-truecolor*) true;; (*) false;; esac' \
		'set-option -sq default-terminal screen-256color' \
		'set-option -sq default-terminal screen'"
# you can't call an alias directly...
if-shell -F 'always' 'set-default-term'
# refresh whenever a client changes (e.g. switching between VT and xterm)
set-hook -g client-attached 'set-default-term'
set-hook -g client-session-changed 'set-default-term'

### Prefix Key	{{{2
#set-option -qg	prefix S-Escape
set-option -qg	prefix	`		# def: C-b	# screen def: C-a
bind-key -r `	send-prefix		# def: C-b
set-option -qg	prefix2 C-b		# def: none
bind-key -r C-b	send-prefix -2		# def: C-b	# screen def: a
unbind-key  C-b				# def: send-prefix

### Session Locking  {{{2
#set-option -qg	lock-after-time	900	# def: 0	# enable locking
set-option -qg	lock-server	off	# def: on	# independent locking
# (I don't normally have lock(1) so try and use vlock first...)
set-option -qg	lock-command	"vlock || lock -np || away || busybox vlock"

bind-key -n C-M-l   run-shell "sudo xmtlock >/dev/null"
bind-key -n C-M-L   run-shell "sudo xmtlock all >/dev/null"

### Switching X servers (local/remote or restart)   {{{2
set-option -qag	update-environment  " DISPLAY"
set-option -qag	update-environment  " XDG_SESSION_COOKIE"
set-option -qag	update-environment  " SESSION_MANAGER"

# Note: uses p--r table as setup for reloading config
bind-key -T p--r    a	attach-session	# re-attach session to force update env

#### Helpers to manipulate the DISPLAY env to more easily	{{{3
bind-key -T p--r    d	switch-client -T p-rd
bind-key -T p-rd    Escape  switch-client -T root
bind-key -T p-rd    g   run-shell 'tmux display-message " $(tmux show-environment DISPLAY)"'
bind-key -T p-rd    l   set-environment DISPLAY :0.0		# default local value
bind-key -T p-rd    r   set-environment DISPLAY localhost:10.0	# default remote value
bind-key -T p-rd    e   run-shell '\
	_d="$(tr "\\000" "\\n" <"/proc/#{client_pid}/environ" | \
	    sed -nEe "/^DISPLAY=/{s/^DISPLAY=//p;q}")"; \
	if [ -n "$_d" ]; then \
	    tmux set-environment DISPLAY "$_d" \; display-message " DISPLAY=$_d"; \
	else \
	    tmux set-environment -u DISPLAY \; display-message " -DISPLAY"; \
	fi; \
	'	# This probably isn't needed, as re-attaching should be enough
bind-key -T p-rd    s   run-shell '\
	_d="$(tmux show-environment DISPLAY)" && \
	case "$_d" in \
	    (-DISPLAY)  _d="unset DISPLAY";; \
	    (DISPLAY=*) _d="export $_d";; \
	    (*)         false;; \
	esac && \
	tmux send-keys "$_d"; \
	'	# Send the env var as a 'sh' compatible way
bind-key -T p-rd    v   run-shell '\
	_d="$(tmux show-environment DISPLAY)" && \
	case "$_d" in \
	    (-DISPLAY)  _d=":unlet \$DISPLAY";; \
	    (DISPLAY=*) _d=":let \$DISPLAY=\"${_d#*=}\"";; \
	    (*)         false;; \
	esac && \
	tmux send-keys "$_d"; \
	'	# Send the env var as a 'vi' compatible way


## Creation	{{{1

### sessions	{{{2
bind-key    C	new-session		# def: none
#bind-key    N	new-session		# def: none

### windows	{{{2
bind-key    c	new-window -c "#{?pane_current_path,#{pane_current_path},$HOME}"	# def: c
#bind-key    n	new-window -c "#{?pane_current_path,#{pane_current_path},$HOME}"	# def: c

### panes	{{{2
bind-key    s	split-window -c "#{?pane_current_path,#{pane_current_path},$HOME}"	# def: "	# horizontal split
bind-key    S	split-window -c "#{?pane_current_path,#{pane_current_path},$HOME}" -h	# def: %	# vertical split


## Navigation	{{{1

# vi like (auto set if 'vi' in $EDITOR)
#set-option -qg	status-keys	    vi
#set-window-option -qg	mode-keys   vi

set-option -qg word-separators	"`Â¬!\"^&*()-=+	[{]};:'@#\\|,<.>/? "

### sessions	{{{2
bind-key -r _	switch-client -p	# def: (
bind-key -r +	switch-client -n	# def: )
bind-key    BTab	switch-client -l	# def: L
bind-key    S-Bspace	switch-client -l	# def: L
bind-key    W	choose-tree -s		# def: s	# moniker: [W]hich session?

### windows	{{{2
set-option -qg	base-index	1	# def: 0	# 0 on far side
#bind-key    0	select-window -t 10
# The command prompt seems to stick an equals at the start of the value??
# TODO: ideally we'd do an incremental filter on the choose-tree command, e.g.:
#	    choose-tree -w -f "#{m:%%*,=#{window_index}}";
#	but you can't differenciate the incremental from the final for now...
bind-key    0	choose-tree -w \; send-keys Home \; \
		command-prompt -p "(choose window)" "\
			send-keys Escape; \
			select-window -t %%"
		#command-prompt -p "(choose window)" -i "send-key f Down '#{m:%%*,#{window_index}}' Enter"
set-window-option -qg	pane-base-index	1	# def: 0
bind-key    -	select-window -p	# def: p
bind-key    =	select-window -n	# def: n
bind-key    Tab	select-window -l	# def: none	# screen def: C-a ??
bind-key    Bspace	select-window -l	# def: none
bind-key    w	choose-tree -w		# def: w	# moniker: [w]hich [w]indow?

### panes	{{{2
bind-key    h	select-pane -L		# def: Left
bind-key    j	select-pane -D		# def: Down
bind-key    k	select-pane -U		# def: Up
bind-key    l	select-pane -R		# def: Right
#bind-key -r p	select-pane -t :.+	# def: o	# next pane numerically
#bind-key -r P	select-pane -t :.-	# def: none	# previous numerically
#bind-key    \;	select-pane -l		# def: ;

## Manipulation {{{1

### sessions	{{{2
bind-key    N	command-prompt -I '#{session_name}'	"rename-session '%%'"	# def: $

### windows	{{{2
set-option -qg	renumber-windows    on	# def: off
#bind-key -r <	move-window -t -:	# def: none	# FIXME: no +- for sessions
#bind-key -r >	move-window -t +:	# def: none	# FIXME: no +- for sessions
bind-key    M	choose-tree -s "move-window -a -t '%%'"	# def: none
bind-key    n	command-prompt -I '#{window_name}'	"rename-window '%%'"	# def: ,
bind-key    i	command-prompt -I '#{window_index}'	"move-window -t '%%'"	# def: .
bind-key -r (	swap-window -t :-	# def: none
bind-key -r )	swap-window -t :+	# def: none

### panes	{{{2
bind-key    b	break-pane		# def: !
bind-key    B	break-pane -d		# background break
bind-key    u	join-pane -t :+		# unbreak, -r allows cycling windows
bind-key    U	join-pane -t :-		# unbreak backwards
bind-key    v	join-pane -ht :+	# unbreak (vertical split)
bind-key    V	join-pane -ht :-	# unbreak (vertical split) backwards
bind-key    m	choose-tree -w "join-pane -t '%%'"	# def: none
bind-key    A	set-window-option automatic-rename	# def: none	# toggle
bind-key -r H	resize-pane -L		# def: C-Left
bind-key -r J	resize-pane -D		# def: C-Down
bind-key -r K	resize-pane -U		# def: C-Up
bind-key -r L	resize-pane -R		# def: C-Right
bind-key    o	rotate-window -D	# def: C-o
bind-key    O	rotate-window -U	# def: none
bind-key    {	swap-pane -D		# def: }
bind-key    }	swap-pane -U		# def: {
run-shell 'tmux \
bind-key    @	swap-pane -dt :.#{pane-base-index}\
'	# ^for expansion		# def: none	# swap to main pane

#### layouts	{{{3
# defaults:
#bind-key    E   select-layout -E
#bind-key    M-1 select-layout even-horizontal
#bind-key    M-2 select-layout even-vertical
#bind-key    M-3 select-layout main-horizontal
#bind-key    M-4 select-layout main-vertical
#bind-key    M-5 select-layout tiled
bind-key -T p--r    l  switch-client -T p-rl
bind-key -T p-rl    Escape  switch-client -T root
bind-key -T p-rl    e   select-layout -E		# resize pane even	    # def: E
bind-key -T p-rl    v   select-layout even-horizontal   # resize panes even vert    # def: M-1
bind-key -T p-rl    V   select-layout main-vertical	# resize panes big vert	    # def: M-4
bind-key -T p-rl    h   select-layout even-vertical	# resize panes even horiz   # def: M-2
bind-key -T p-rl    H   select-layout main-horizontal   # resize panes big horiz    # def: M-3
bind-key -T p-rl    t   select-layout tiled		# resize panes even tiled   # def: M-5
bind-key -T p-rl    m   run-shell 'tmux \
resize-pane -x #{window_width} -y #{window_height}'	# resize panes max	    # def: n/a

### Mouse Interaction  {{{2
set-option -qg	mouse		    on	# def: off

### Miscellaneous 
bind-key    a	set-option synchronize-panes	# moniker: type in [a]ll panes

## Destruction	{{{1

set-option -qg	detach-on-destroy  off	# def: on	# on/off=>detach/switch

### sessions	{{{2
#FIXME: confirm-before cannot take options.
#bind-key    Q	confirm-before -p "kill-session #{session_name} and exit? (y/n)" run-shell "tmux set-option -s -t '#{session_name}' detach-on-destroy on\\; kill-session -t '#{session_name}'"
#bind-key    C-x	choose-session "confirm-before -p 'kill-session? (y/n)' kill-session -t '#{session_name}'"
bind-key    X	confirm-before -p "kill-session '#{session_name}'? (y/n)" kill-session

### windows	{{{2
bind-key    x	confirm-before -p "kill-window '#{window_index}:#{window_name}'? (y/n)" kill-window

### panes	{{{2
bind-key    DC	confirm-before -p "kill-pane '#{pane_index}:#{pane_title}'? (y/n)" kill-pane


## Viewing	{{{1

set-window-option -qg	aggressive-resize   on	# Always maximise window

### copy mode	{{{2
bind-key    Escape  copy-mode		# def: [
bind-key -T copy-mode-vi Escape	if-shell -F "#{selection_present}" \
					'send-keys -X clear-selection' \
					'send-keys -X cancel'

# VT like scrolling	{{{3
#- the ones with FIXME don't actually work...
bind-key -T root	 C-Up	copy-mode \; send-keys -X scroll-up
bind-key -T root	 S-Up	copy-mode \; send-keys -X scroll-up
bind-key -T copy-mode-vi C-Up	send-keys -X scroll-up
bind-key -T copy-mode-vi S-Up	send-keys -X scroll-up
bind-key -T copy-mode-vi C-Down	send-keys -X scroll-down-and-cancel
bind-key -T copy-mode-vi S-Down	send-keys -X scroll-down-and-cancel
bind-key -T root	 C-PgUp	copy-mode \; send-keys -X page-up
bind-key -T root	 S-PgUp	copy-mode \; send-keys -X page-up	# FIXME
bind-key -T copy-mode-vi C-PgUp	send-keys -X page-up
bind-key -T copy-mode-vi S-PgUp	send-keys -X page-up			# FIXME
bind-key -T copy-mode-vi C-PgDn	send-keys -X page-down-and-cancel
bind-key -T copy-mode-vi S-PgDn	send-keys -X page-down-and-cancel	# FIXME

# vi like buffers	{{{3
set-option -g @buffer-select-copy \
    'tmux load-buffer -b "$(tmux show-option -v @buffer-select-buffer)"'
set-option -g @buffer-select-paste	\
    'tmux paste-buffer -pb "$(tmux show-option -v @buffer-select-buffer)"'
# FIXME doesn't work
set-option -sqa command-alias buffer-select-vi='\
 set-option -u @buffer-select-copy  \;\
 set-option -u @buffer-select-paste  \;\
 switch-client -T buffer-select-vi \
'
# FIXME: strictly this should be #{==:#{pane_mode},copy-mode} (because of
# buffer mode) but then the comma breaks the array as it's the seperator...
set-option -sa command-alias buffer-select-vi-cancel='\
 if-shell -F "##{pane_in_mode}"\
  "switch-client -T copy-mode-vi"\
  "switch-client -T root"\
'

bind-key -T prefix		'"'	set-option -u @buffer-select-copy  \;\
					set-option -u @buffer-select-paste  \;\
					switch-client -T buffer-select-vi
bind-key -T copy-mode-vi	'"'	set-option -u @buffer-select-copy  \;\
					set-option -u @buffer-select-paste  \;\
					switch-client -T buffer-select-vi

bind-key -T buffer-select-vi	Escape	buffer-select-vi-cancel
bind-key -T buffer-select-vi	C-c	buffer-select-vi-cancel

bind-key -T buffer-select-vi	*	set-option @buffer-select-copy 'xclip -i -selection primary' \;\
					set-option @buffer-select-paste 'xclip -o -selection primary' \;\
					switch-client -T buffer-action-vi
bind-key -T buffer-select-vi	+	set-option @buffer-select-copy 'xclip -i -selection clipboard' \;\
					set-option @buffer-select-paste 'xclip -o -selection clipboard' \;\
					switch-client -T buffer-action-vi
run-shell '\
 exec >~/tmux_test.log 2>&1; \
 set -x; \
 keys="0123456789abcdefghijklmnopqrstuvwxyz"; \
 for i in $(seq ${#keys} ); \
 do \
  key="$(printf "%s" "$keys" | cut -c"$i")"; \
  tmux bind-key -T buffer-select-vi "$key" \
    run-shell "tmux set-option @buffer-select-buffer \
      \"\$(tmux list-buffers -F \"####{buffer_name}\" | sed -ne\"$i{p;q}\")\" \
    "; \
 done; \
 '
		
bind-key -T buffer-action-vi	y	if-shell -F "#{==,#{pane_mode},copy-mode}" \
						'display-message "copy copy" ; send-keys -X copy-pipe-and-cancel "$(tmux show-options -v @buffer-select-copy)"' \
						'display-message "root copy" ; run-shell "tmux save-buffer - | $(tmux show-options -v @buffer-select-copy)"'
bind-key -T buffer-action-vi	p	if-shell -F "#{==,#{pane_mode},copy-mode}" \
						'send-keys -X cancel' \; \
					if-shell -F "#{==,#{pane_mode},buffer-mode}" \
						'send-keys Escape' \; \
					paste-buffer -p

bind-key -T copy-mode-vi y	send-keys -X copy-selection-and-cancel
# put buffer into X selection:
bind-key -T copy-mode-vi Y	send-keys -X copy-pipe-and-cancel 'xclip -i -selection primary'
bind-key -T copy-mode-vi C-Y	send-keys -X copy-pipe-and-cancel 'xclip -i -selection clipboard'
bind-key    Y	    run-shell -b 'tmux save-buffer - | xclip -i -selection primary'
bind-key    C-y	    run-shell -b 'tmux save-buffer - | xclip -i -selection clipboard'
bind-key    p	    paste-buffer -p	# def: ]
bind-key -T copy-mode-vi p	if-shell -F "#{selection_present}" \
					'send-keys -X copy-selection-and-cancel' \;\
				if-shell -F "#{pane_in_mode}" \
					'send-keys -X cancel' \;\
				paste-buffer -p
# Paste X selection:
# The first form is sometimes clipped, but doesn't interrupt an existing pipe-pane -O
bind-key    P	    run-shell 'xclip -o -selection primary | tmux load-buffer - \; paste-buffer -p'
bind-key    C-p	    run-shell 'xclip -o -selection clipboard | tmux load-buffer - \; paste-buffer -p'
#bind-key    P	    pipe-pane -I 'xclip -o -selection primary'
#bind-key    C-p	    pipe-pane -I 'xclip -o -selection clipboard'

bind-key    '#'	    choose-buffer "paste-buffer -pb '%%'"	# def: =	# list-buffers is useless


# vi like selection	{{{3

bind-key -T copy-mode-vi	v	if-shell -F "#{selection_present}" \
						'if-shell -F "#{rectangle_toggle}" \
							"send-keys -X rectangle-toggle" \
							"send-keys -X clear-selection" \
						' \
						'if-shell -F "#{rectangle_toggle}" \
							"send-keys -X rectangle-toggle" ; \
						 send-keys -X begin-selection'
# TODO work with line based properly
bind-key -T copy-mode-vi V	if-shell -F "#{selection_present}" \
					'send-keys -X select-line' \
					'send-keys -X begin-selection'
bind-key -T copy-mode-vi C-v	if-shell -F "#{selection_present}" \
					'if-shell -F "#{rectangle_toggle}" \
						"send-keys -X clear-selection" \
						"send-keys -X rectangle-toggle" \
					' \
					'if-shell -F "#{?rectangle_toggle,0,1}" \
						"send-keys -X rectangle-toggle" ; \
					 send-keys -X begin-selection'

# vi inc search mode	{{{3
bind-key -T copy-mode-vi /	command-prompt -ip "(search down)" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ?	command-prompt -ip "(search up)" "send -X search-backward-incremental \"%%%\""

### mouse binds	{{{2
# copied default for information:
#bind-key -T copy-mode-vi MouseDown1Pane    select-pane
#bind-key -T copy-mode-vi MouseDrag1Pane    select-pane ; send-keys -X begin-selection
#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-and-cancel
#bind-key -T copy-mode-vi WheelUpPane       select-pane ; send-keys -X -N 5 scroll-up
#bind-key -T copy-mode-vi WheelDownPane     select-pane ; send-keys -X -N 5 scroll-down
#bind-key -T copy-mode-vi DoubleClick1Pane  select-pane ; send-keys -X select-word
#bind-key -T copy-mode-vi TripleClick1Pane  select-pane ; send-keys -X select-line

bind-key -T copy-mode-vi MouseDown1Pane	    select-pane\; send-keys -X clear-selection
unbind-key -T copy-mode-vi MouseDragEnd1Pane  #send-keys -X copy-selection
bind-key -T copy-mode-vi DoubleClick1Pane   select-pane\; send-keys -X select-word #\; send-keys -X copy-selection
bind-key -T copy-mode-vi TripleClick1Pane   select-pane\; send-keys -X select-line #\; send-keys -X copy-selection

bind-key -T copy-mode-vi MouseDown2Pane	    select-pane\; \
					    if-shell -F "#{selection_present}" \
						'send-keys -X copy-selection-and-cancel' \
						'cancel'\; \
					    paste-buffer -p

bind-key -T copy-mode-vi MouseDown3Pane	    select-pane\; \
					    send-keys -X begin-selection
					    # TODO we want something like below, but it doesn't work
					    #if-shell -F "#{selection_present}" \
						'send-keys -X other-end; send-keys -X other-end;'\; \
					    send-keys -X begin-selection
bind-key -T copy-mode-vi MouseUp3Pane	    send-keys -X begin-selection \
					    #send-keys -X copy-selection
bind-key -T copy-mode-vi MouseDrag3Pane	    select-pane\; \
					    send-keys -X begin-selection
					    #if-shell -F "#{selection_present}" \
						'send-keys -X other-end other-end'\; \
					    send-keys -X begin-selection
unbind-key -T copy-mode-vi MouseDragEnd3Pane  #send-keys -X copy-selection

# TODO temporary comment to get the default
bind-key -T root	MouseDown2Pane	    select-pane\; \
					    if-shell -F "#{alternate_on}" \
						"send-keys -M" \
						"paste-buffer -p"
bind-key -T root	DoubleClick1Pane    select-pane\; \
					    if-shell -F "#{alternate_on}" \
						"send-keys -M" \
						"copy-mode; \
						 send-keys -X select-word; \
						"
						#send-keys -X copy-selection
bind-key -T root	TripleClick1Pane    select-pane\; \
					    if-shell -F "#{alternate_on}" \
						"send-keys -M" \
						"copy-mode; \
						 send-keys -X select-line; \
						"
						#send-keys -X copy-selection

### edit mode	{{{2
# TODO: works as expected?
##bind-key -T	vi-edit	Escape	switch-mode	# def: Escape
#bind-key -T	vi-edit	C-c	cancel		# def: C-c
#bind-key -T	vi-edit	Tab	complete	# def: Tab
#bind-key -T	vi-edit	C-u	delete-line	# def: C-u
#bind-key -T	vi-edit	Up	history-up	# def: none
#bind-key -T	vi-edit	Down	history-down	# def: none
#bind-key -T	vi-edit	Left	cursor-left	# def: none
#bind-key -T	vi-edit	Right	cursor-right	# def: none
##bind-key -cT	vi-edit	i	switch-mode	# def: i
#bind-key -cT	vi-edit	Escape	cancel		# def: C-c
##bind-key -cT	vi-edit	A	end-of-line | switch-mode
##bind-key -cT	vi-edit	C	delete-end-of-line | switch-mode
##bind-key -cT	vi-edit	S	delete-line | switch-mode
#bind-key -cT	vi-edit	p	paste


## Appearance	{{{1

### Monitor  {{{2
set-window-option -qg	monitor-activity    off		    # something happened
set-window-option -qg	monitor-content	    "* [/~]* [$#] " # [bash] prompt appeared
set-window-option -qg	monitor-silence	    0		    # nothing for N seconds
# Flash status line when monitored event occurs
set-option -qg	visual-activity		    on	# def: off
set-option -qg	visual-content		    on	# def: off
set-option -qg	visual-silence		    on	# def: off
set-option -qg	display-time		    700

### Status line	{{{2
set-option -qg	status-position		top		# bottom
set-option -qg	status-interval		5		# def: 15	# redraw time
set-option -qg	status-justify		centre		# def: left	# windows location
# status-{left,right} def:		'[#{session_name}]'	'"#{=24:pane_title}" %T %d-%b-%y'
set-option -qg	status-left		'#[fg=black,bg=green]'
set-option -qag	status-left		'[%R %d-%b-%y #(cpu_mem_usage -b -h1) ]'
set-option -qg	status-right		'\
#{?#{pane_in_mode}#{0:\
    },#[fg=black#,bg=yellow][#{0:\
	}#{?#{==:#{pane_mode},copy-mode}#{0:\
	    },#{?#{selection_present}#{0:\
		},#{?#{rectangle_toggle},bloc,visu}#{0:\
		},#{?#{==:#{client_key_table},root},copy,#{=4:client_key_table}}#{0:\
		}}#{0:\
	    },#{=4:pane_mode}#{0:\
	    }}#{0:\
	}]#{0:\
    },#{?#{==:#{client_key_table},root}#{0:\
	},#[fg=brightblack#,bg=black][root]#{0:\
	},#[fg=white#,bg=black][#{=4:client_key_table}]#{0:\
	}}#{0:\
    }}' # note:
	# - prefix ',' and '}' with '#' if needed not as part of a conditional.
	# - #{0:\
	#	} is used to allow nice formatting of the conditionals.
set-option -qag	status-right		'#[fg=black,bg=black] '
set-option -qag	status-right		'#[fg=black,bg=green]'
set-option -qag	status-right		'[ #{session_name}:#{window_index}.#{pane_index}#{?pane_synchronized,*, }]'
# status-{left,right}-length def:	10		40
set-option -qg	status-left-length	23		# def: 10
set-option -qg	status-right-length	40		# def: 40

### Terminal Titles {{{2
set-option -qg	set-titles		on			# def: off
set-option -qg	set-titles-string	"#{pane_title}"

### Prettify	{{{2

#### Message	{{{3
set-option -qg	message-style		bold			# def: none
set-option -qag	message-style		bg=green    #'#440044'	# def: yellow
set-option -qag	message-style		fg=brightwhite		# def: black
set-option -qg	message-command-style	none			# def: none
set-option -qag	message-command-style	bg=green    #'#440044'	# def: black
set-option -qag	message-command-style	fg=white		# def: yellow
#### Status	{{{3
set-option -qg	status-style		none			# def: none
set-option -qag	status-style		bg=black		# def: green
set-option -qag	status-style		fg=white		# def: black
# status-\(left\|right\)-\(.*\) def: status-\2
set-option -qg	status-left-style	none	# Done directly in status-left
#set-option -qag	status-left-style	bg=green    #'#990099'
#set-option -qag	status-left-style	fg=black
set-option -qg	status-right-style	none	# Done directly in status-right
#set-option -qag	status-right-style	bg=green    #'#990099'
#set-option -qag	status-right-style	fg=black

#### Window (Status)	{{{3
# window-status-\(.*\) def: status-\1
#set-window-option -qg	window-status-style
#set-window-option -qag	window-status-style	bg= 
#set-window-option -qag	window-status-style	fg=
# window-status-\(current\|content\|activity\)-\(.*\) def: window-status-\2
set-window-option -qg	window-status-current-style	bold
set-window-option -qag	window-status-current-style	bg=green	#'#AA00AA'
set-window-option -qag	window-status-current-style	fg=white
set-window-option -qg	window-status-content-style	none		# def: reverse
#set-window-option -qag	window-status-content-style
set-window-option -qag	window-status-content-style	fg=green
set-window-option -qg	window-status-activity-style	none		# def: reverse
#set-window-option -qag	window-status-activity-style	'bg=#333333'
set-window-option -qag	window-status-activity-style	fg=green	#brightmagenta

#### Copy Mode	{{{3
set-window-option -qg	mode-style	fg=black,bg=yellow

## Misc		{{{1

### Insert Text	{{{2
#bind-key    I    command-prompt -p "Insert:" -I "tail -Fn200 " "send-keys '%%' Enter"
bind-key    I    command-prompt -p "Insert:" "if-shell 'case \"\$_TMUX_I_%1 \" in \" \"*) false;; esac' 'send-keys \$_TMUX_I_%1' 'send-keys \"%1\"'"
set-environment -g  _TMUX_I_ ""
set-environment -g  _TMUX_I_t "tail -Fn200 "
set-environment -g  _TMUX_I_l "tail -Fn200 /var/log/"
set-environment -g  _TMUX_I_e "engineering"
set-environment -g  _TMUX_I_E "engineering\n"
set-environment -g  _TMUX_I_se "ssh engineering@"
set-environment -g  _TMUX_I_sss "mysql -e 'SHOW SLAVE STATUS \\G'\n"

## De-Dupe	{{{1

run-shell 'tmux set-option -g update-environment \
	    "$(tmux show-options -gv update-environment | sort -u | tr "\\n" " ")"'
run-shell 'tmux set-option -s command-alias \
	    "$(tmux show-options -sv command-alias | tac | sort -u -t= -k1,1 | tr "\\n" ",")"'


## End		}}}1
# vim: sw=4 sts=4 fdm=marker noet
