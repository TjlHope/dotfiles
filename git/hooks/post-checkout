#!/bin/sh
# vi: set sw=4 et
# post-checkout
#       This hook is invoked when a git checkout is run after having updated
#       the worktree. The hook is given three parameters: the ref of the
#       previous HEAD, the ref of the new HEAD (which may or may not have
#       changed), and a flag indicating whether the checkout was a branch
#       checkout (changing branches, flag=1) or a file checkout (retrieving a
#       file from the index, flag=0). This hook cannot affect the outcome of
#       git checkout.
#
#       It is also run after git clone, unless the --no-checkout (-n) option is
#       used. The first parameter given to the hook is the null-ref, the second
#       the ref of the new HEAD and the flag is always 1.
#
#       This hook can be used to perform repository validity checks,
#       auto-display differences from the previous HEAD if different, or set
#       working dir metadata properties.

NL="
"
_IFS="$IFS"

git_dbg() {
    [ -z "$GIT_DBG" ] || echo "post-checkout:" "$@"
}

PREV_HEAD="$1"
NEW_HEAD="$2"
BRANCH="$3"
git_dbg "argv: [$PREV_HEAD,$NEW_HEAD,$BRANCH]"


# Set up hg bridge, if appropriate
case "$(git config remote.origin.url)" in
    ?hg:*|hg:*|gitifyhg:*)          # mercurial repo (and my aliases)
        git_dbg "bridge: hg"

        if [ "$(printf "%d" "0x$PREV_HEAD" 2>/dev/null)" -eq 0 ]; then  # it's a clone
            git_dbg "bridge: cloning..."
            # Include the notes ref in the log
            git config notes.displayRef refs/notes/hg
            git_dbg "bridge: notes.displayRef: $(
                                            git config notes.displayRef)"
        fi

        if [ ! -f "$GIT_DIR/refs/notes/hg" ]; then
            # Set up notes ref for the mercurial commit hash
            if hg_ref_fl="$(ls "$GIT_DIR/refs/notes/hg-"* 2>&1)"; then
                hg_ref="${hg_ref_fl#$GIT_DIR/}"
                git_dbg "bridge: hg ref: $hg_ref"
                git symbolic-ref refs/notes/hg "$hg_ref"
            else
                git_dbg "bridge: $hg_ref_fl"
            fi
        fi

        if [ -f .hgignore ] && [ "$BRANCH" -eq 1 ]; then  # branch checkout
            # (re)generate the .gitignore file
            git_dbg "bridge: generate .gitignore"
            sed <.hgignore >.gitignore -nEe '
                /^[[:space:]]*#/ {
                    p; b;       # pass through comments, next cycle
                }
                /^syntax:/ {
                    h; d;       # record current match syntax, next cycle
                }

                x;              # not special, exchange to get match syntax
                /^[[:space:]]*$|^syntax:[[:space:]]*regexp/ {
                    x;          # exchange to get match line back,
                    b regexp;   # and branch to regexp (default) handling
                }
                /^syntax:[[:space:]]*glob/ {
                    x;          # exchange to get match line back,
                    b glob;     # and branch to glob handling
                }
                {               # unknown syntax
                    x; G;       # so exchange to get match line back,
                    s/^([^\n]*)\n(.*)$/# invalid \2 ; ignoring: \1/
                    p; b;       # print an informative comment, then next cycle
                }

                # regexp conversion to globs (best effort)
                :regexp
                # first try and do something about groups
                s/([^\])[()|]+/\1/g;         # TODO: proper group handling
                # just replace repeat counts with a *
                s/([^\])[?+]/\1/g; s/([^\\])\{[0-9,]+\}/\1*/g;
                # now get rid of extra backslashes
                s/\\//g;
                # replace anchors with stars at the opposite end
                s/^\^(.*)\$$/\1/; s/^\^(.*)/\1*/; s/(.*)\$$/*\1/;
                # replace .* with *; . with ?; and []+ with []*
                s/([^\\])\.\*/\1*/g; s/([^\\])\./\1?/g; s/([^\\])\+/\1*/g;
                # TODO: anything* should be changed to just *
                p; b;           # done, so print, and next cycle

                # globs can just pass through
                :glob
                p; b;           # so print, and next cycle
                '
            printf '\n.gitignore\n' >>.gitignore
        fi
        ;;
    *)
        git_dbg "bridge: not required"
        ;;
esac


# Set up eclipse AutoDeriv, if appropriate
if [ -f .gitignore ]
then
    found=false
    IFS="$NL"; set -f;  # shellcheck disable=2044
    for p in $(find ./ -name .project -print -o -name '.?*' -prune)
    do  found=true
        d="${p%/*}/"; d="${d#./}"
        if [ ! -e "$d.derived" ]
        then
            r="$(echo "$d" | sed -Ee 's|[^/]+|..|g')"
            git_dbg "autoderiv: ln -s $r.gitignore $d.derived"
            ln -s "$r.gitignore" "$d.derived"
        else
            git_dbg "autoderiv: $d.derived already exists"
        fi
    done
    "$found" ||
        git_dbg "autoderiv: no .project" IFS="$_IFS"; set +f
else
    git_dbg "autoderiv: no .gitignore"
fi


# Cannot affect the outcome, so don't even try.
exit 0
